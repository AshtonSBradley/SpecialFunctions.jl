#using SpecialFunctions
using Base.Test

include("../src/expint.jl")

relerr(z, x) = z == x ? 0.0 : abs(z - x) / abs(x)
relerrc(z, x) = max(relerr(real(z),real(x)), relerr(imag(z),imag(x)))
≅(a,b) = relerrc(a,b) ≤ 1e-13

@testset "exponential integrals" begin
    x = [1e-6, 0.01, 0.5, 2.5, 4.5, 6.5, 20.0, 120.0, 2000.0]
    z = [complex(a,b) for a in x, b in x]

    # in Maple, data generated by Digits := 100;
    #   for b in x do for a in x do printf("%0.20Zg,\n", Ei(1, a+b*I)) end do end do :
    ei1 = [12.891722302782768589-0.7853971633979483095im,
        4.0379295715383621964-9.9004983041583529165e-05im,
        0.55977359477434121977-1.2130613194226385477e-06im,
        0.024914917870246751696-3.2833999449547916721e-08im,
        0.0020734007547131058037-2.4686658973865442764e-09im,
        0.00020342986683926475603-2.3129833738111275589e-10im,
        9.8355252906444711621e-11-1.0305768112190891161e-16im,
        6.3373251550082887823e-55-6.3897067281005835121e-61im,
        1.2876244456813849559e-872-1.2882679364803599000e-878im,
        4.0279805159654755202-1.5606963873505755086im,
        3.6913808201114747439-0.77544805228700201559im,
        0.55959167549751880287-0.012127985534434292968im,
        0.024912619538792484878-0.00032832839333163395392im,
        0.0020732498938855012302-2.4686024034706486197e-05im,
        0.00020341652286119510078-2.3129311381821432618e-06im,
        9.8349842428297849997e-11-1.0305578315355766571e-12im,
        6.3370030100273483604e-55-6.3895984438306825511e-57im,
        1.2875600006160894574e-872-1.2882464439740027477e-874im,
        0.17778503765545551913-1.0776871535866248835im,
        0.18714922185681841423-1.0601318169089979707im,
        0.25786645713798380334-0.39669043545581521376im,
        0.019462088711510048178-0.015022119203275703827im,
        0.0017090684685442022988-0.0011567425269795355696im,
        0.00017103593088550758473-0.00010923895898679984014im,
        8.5138884343739765531e-11-4.9189240496318620409e-11im,
        5.5488747328017198312e-55-3.0612078147540895711e-55im,
        1.1298424362882887244e-872-6.1760236298119091850e-873im,
        -0.28587095697658145676+0.20772352619169191052im,
        -0.28348288357496056965+0.20454001468598332846im,
        -0.18140406220980608542+0.09155666561319542927im,
        -0.019414002613084374208+0.00031345182708342109743im,
        -0.0018306105704108244756-0.00036969890919886751145im,
        -0.00018298180143336619388-5.9074392609593614871e-05im,
        -8.4621026498120565036e-11-4.8747422890447962395e-11im,
        -5.1532792848802639629e-55-3.6862255614499952194e-55im,
        -1.0325332704519881929e-872-7.6931734058701482077e-873im,
        0.19349090487293753998+0.083344040740835664873im,
        0.19133017885696679616+0.082875590009752576946im,
        0.10925835212864517984+0.060649128136236401231im,
        0.0094939464987820385819+0.010775878392120399786im,
        0.00073803215699746547759+0.0013866263266706901136im,
        5.7251750217387933080e-05+0.00016315635342107420208im,
        -4.8366832993148004425e-14+9.6147983121449993566e-11im,
        -1.1039336602458750491e-55+6.2359864993273287084e-55im,
        -2.6859382363289352017e-873+1.2592957102818180965e-872im,
        -0.011101486419575430868-0.14900190211483739657im,
        -0.010773363260890545573-0.14750684537995437055im,
        -0.00018125796075920172722-0.089529506731682142584im,
        0.0028695274651489559974-0.010667066995249370765im,
        0.00059462726847960272118-0.0011603764043081714163im,
        8.9579443509592565349e-05-0.00012253507789315086447im,
        8.1590074935897296563e-11-4.6502699380848915783e-11im,
        6.0981059261274075684e-55-1.6909128259938016702e-55im,
        1.2565650607515540143e-872-2.8107555300142700197e-873im,
        -0.044419775198114113884-0.022554605347362749265im,
        -0.043965673703431050626-0.022351488190182059623im,
        -0.02655430498384905124-0.014321885717034198386im,
        -0.0033463190478111343157-0.0022531864101770384993im,
        -0.00041318016475036518633-0.00033922062816637521436im,
        -5.0081949468554799943e-05-4.9308972878589333070e-05im,
        -2.3824537449367396579e-11-6.6969873156525615158e-11im,
        1.5863673409279722021e-55-6.0478644194577369481e-55im,
        5.1365568696186871831e-873-1.1806646148119859328e-872im,
        -0.0047812334325105613111-0.0068241965250827268366im,
        -0.0047330979308700597241-0.0067566910073303921704im,
        -0.0028825755672360524446-0.0041509527737402133303im,
        -0.00038057120551816506577-0.00056799313404742425691im,
        -5.0187170854696008049e-05-7.7667437275781145565e-05im,
        -6.6105701298313291754e-06-1.0612988831910489374e-05im,
        -7.3017220985767410908e-12-1.5261286143685053955e-11im,
        7.6137431778713245761e-56-4.4345347497992024242e-55im,
        9.9992901451468428678e-873-8.0757494135412316091e-873im,
        -0.00046511091942884874602+0.00018349698942878044907im,
        -0.00046048435604127873452+0.00018166904290475408356im,
        -0.00028213208609073354945+0.00011122611461936524697im,
        -3.8197411726404668101e-05+1.5014609093259198090e-05im,
        -5.1714753090131300417e-06+2.0268313705007845349e-06im,
        -7.0015474897924910648e-07+2.7360089610015601779e-07im,
        -9.6234710599687952858e-13+3.6859055638245299214e-13im,
        -3.6375235258150419519e-56+1.1887048382649273576e-56im,
        -8.3546376979426382228e-873-3.6249499694216809150e-873im]

    badz_ei1 = [0.5 + 6.5im, 20.0 + 4.5im, 2.5 + 2.5im] # points where our accuracy is currently lower
    for (z, exact) in zip(z, ei1)
        if z in badz_ei1
            @test relerrc(expint(1, z), exact) < 1e-11
        else
            @test expint(1, z) ≅ exact ≅ conj(expint(1, conj(z)))
        end
    end

    # points right on the boundary of different truncatino thresholds:
    Z = [2.78+0.5im, 2.79+0.5im, 7.59+0.5im, 7.61+0.5im, 23+0.5im, 23.5+0.5im, 201+0.5im]
    # in Maple:
    # Z := [2.78+0.5*I, 2.79+0.5*I, 7.59+0.5*I, 7.61+0.5*I, 23+0.5*I, 23.5+0.5*I, 201+0.5*I];
    # for z in Z do printf("%0.20Zg,\n", Ei(1, z)) end do :
    ei1z = [ 0.013679707084050675041-0.010269497423941253506im,
        0.013509747080462402021-0.010132719012012574376im,
        5.0358697036659963108e-05-3.1528803995047190107e-05im,
        4.9249257696747604049e-05-3.0824407879028495151e-05im,
        3.7138762069590453378e-12-2.1308409598172658311e-12im,
        2.2070318420531641363e-12-1.2650296727243962632e-12im,
        2.2088485450200221892e-90-1.2138086032504670103e-90im]
    for (z, exact) in zip(Z, ei1z)
        @test expint(z) == expint(1, z) ≅ exact ≅ conj(expint(1, conj(z)))
    end


    # in Maple:
    # for z in Z do for n in [-100,-10,-3,-2,-1,0,1,2,3,4,5,10,100] do printf("%0.20Zg,\n", Ei(n, z)) end do end do :
    ei_n = [1.6961437800849534096e+112+2.0361497918870029027e+112im,
        -14.993553879634878448-36.802341317005494103im,
        0.042901517863725778191-0.051059520663943602992im,
        0.030117355917684191016-0.030250621233436499672im,
        0.022203823913901704522-0.019647602128260272689im,
        0.017106519304699983098-0.013775577146021877609im,
        0.013679707084050675041-0.010269497423941253506im,
        0.011279577834445388452-0.0080334955170594809779im,
        0.0095349690508944857165-0.0065247580966940826557im,
        0.0082247730767477267327-0.0054571672767428404265im,
        0.0072126148620866978219-0.0046710765806548987962im,
        0.0044086603860545931302-0.0026678678888805096831im,
        0.00053331086097978682243-0.00029479205962813687609im,
        1.1009618430447300397e+112+1.5053307615554234551e+112im,
        -14.1871776418146936-35.518901431084610611im,
        0.042265416823072814162-0.050112523146855027986im,
        0.029691529415952747697-0.02974477753508873875im,
        0.021904784788055056518-0.019347633025999151257im,
        0.016885979809730760901-0.013580605185587198997im,
        0.013509747080462402021-0.010132719012012574376im,
        0.011143632401446033585-0.0079314860596390232527im,
        0.0094228544160442385417-0.006444934328626523334im,
        0.0081299850922885784049-0.0053923196646923413065im,
        0.0071308420055277795026-0.004616829811143890427im,
        0.0043610625465989821604-0.0026388022916362719613im,
        0.0005279521192857815666-0.00029182962463749354553im,
        8.7443100163615490196e+68-3.2984378843542711613e+68im,
        0.00045149501179014556292-0.00044238944070247561762im,
        8.3190089913137679563e-05-5.6150638833814919283e-05im,
        7.1962247844224619108e-05-4.7415925747026498043e-05im,
        6.3150032843114758925e-05-4.0782612973405953575e-05im,
        5.6098697440995406830e-05-3.5624489495586904725e-05im,
        5.0358697036659963108e-05-3.1528803995047190107e-05im,
        4.5614445819175875157e-05-2.8216252746928712088e-05im,
        4.1639794091969670858e-05-2.5493195555702958139e-05im,
        3.8269574463015769772e-05-2.3222356443068762199e-05im,
        3.5381027482281129132e-05-2.1304407094905720809e-05im,
        2.5565333508357790572e-05-1.4986944660047854631e-05im,
        4.1481154852173683928e-06-2.2916616489443679287e-06im,
        6.7541299958995854109e+68-2.4142586795252939223e+68im,
        0.00043838752754863282327-0.00042829475715524206202im,
        8.1257157941225830895e-05-5.4808097692850803675e-05im,
        7.0317852623988265101e-05-4.6306393952741408495e-05im,
        6.1727296268866111010e-05-3.9845434527305255532e-05im,
        5.4849978962534552906e-05-3.4818246004602464059e-05im,
        4.9249257696747604049e-05-3.0824407879028495151e-05im,
        4.4618407895425665259e-05-2.7592747502724428957e-05im,
        4.0737502535818826274e-05-2.4935129032868701649e-05im,
        3.7445834697724520293e-05-2.2718093980512022872e-05im,
        3.4623903466812392195e-05-2.0845021192730810280e-05im,
        2.5029435083751341226e-05-1.4671488550706304772e-05im,
        4.0652104146054930344e-06-2.2458552094276057618e-06im,
        -1.5561909797228719954e+20-2.1591580138125195501e+20im,
        6.4740279724868730605e-12-3.8396751324475294183e-12im,
        4.4095792767139879532e-12-2.5522122691016758774e-12im,
        4.2133211096589225487e-12-2.4326736185932534796e-12im,
        4.0331280807280260722e-12-2.3233804888067889956e-12im,
        3.8671699311522009421e-12-2.2231155069903430972e-12im,
        3.7138762069590453378e-12-2.1308409598172658311e-12im,
        3.5718929300291175304e-12-2.0456677228841993191e-12im,
        3.4400474589419951787e-12-1.9668302669398825959e-12im,
        3.3173198269533209356e-12-1.8936664283518295494e-12im,
        3.2028192339733742306e-12-1.8256009391465928989e-12im,
        2.7294005696322684698e-12-1.5461823070260176755e-12im,
        7.3535191996271549949e-13-4.0566657077174895902e-13im,
        -16579503626482712703.0-25426699631178732341.0im,
        3.7952288889143779962e-12-2.2450920854994240593e-12im,
        2.6110396252796004889e-12-1.5091902210614521563e-12im,
        2.4973394890417784253e-12-1.4401038334747152901e-12im,
        2.3927610358715741748e-12-1.3768157301273702738e-12im,
        2.2962843705696759530e-12-1.3186502581772347887e-12im,
        2.2070318420531641363e-12-1.2650296727243962632e-12im,
        2.1242447128644469571e-12-1.2154574938834494410e-12im,
        2.0472641691098870391e-12-1.1695050660256705864e-12im,
        1.9755157767936071929e-12-1.1268006382772880991e-12im,
        1.9084966909218973018e-12-1.0870204426901782064e-12im,
        1.6305580250023248393e-12-9.2318516747326010512e-13im,
        4.4418806139920269732e-13-2.4503227381764316325e-13im,
        4.3704754029765324599e-90-2.4152564317509763048e-90im,
        2.3351879635246672534e-90-1.2836635528589650768e-90im,
        2.2531847968157126718e-90-1.2383175332657106976e-90im,
        2.2419355327393769828e-90-1.2320984408986008653e-90im,
        2.2307974863455512698e-90-1.2259411944724470699e-90im,
        2.2197690243190573351e-90-1.2198448804848941292e-90im,
        2.2088485450200221892e-90-1.2138086032504670103e-90im,
        2.1980344777232778974e-90-1.2078314844703333258e-90im,
        2.1873252818794736907e-90-1.2019126628144158789e-90im,
        2.1767194463971838853e-90-1.1960512935154454935e-90im,
        2.1662154889453219335e-90-1.1902465479745597605e-90im,
        2.1151739199314734528e-90-1.1620442600768011123e-90im,
        1.4846078621870869804e-90-8.1425706261559988046e-91im]
    bad_nz = [(3, 2.78+0.5im)]
    for (nz, exact) in zip([(n,z) for n in [-100,-10,-3,-2,-1,0,1,2,3,4,5,10,100], z in Z], ei_n)
        n, z = nz
        info("TESTING $n, $z --> $(relerrc(expint(n, z), exact))")
        if nz in bad_nz
            @test relerrc(expint(n, z), exact) < 1e-12
        else
            @test expint(n, z) ≅ exact ≅ conj(expint(n, conj(z)))
        end
    end
end
